<<<<<<< HEAD
#ifndef TELEMETRY_LOGGER_H
#define TELEMETRY_LOGGER_H

#include <string>
#include <map>
#include <vector>

struct TelemetryData {
    std::string key;        // –ö–ª—é—á –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "altitude")
    double value;           // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
};

class TelemetryLogger {
public:
    TelemetryLogger();                              // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    ~TelemetryLogger();                             // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä

    void logData(const std::string& key, double value); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    std::vector<TelemetryData> getTelemetry();          // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    void sendToServer(const std::string& serverAddress); // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä

private:
    std::vector<TelemetryData> telemetryCache;      // –ö—ç—à —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    void clearCache();                              // –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–∞–Ω–Ω—ã—Ö
};

#endif // TELEMETRY_LOGGER_H
=======
#pragma once
#ifndef TELEMETRY_LOGGER_H
#define TELEMETRY_LOGGER_H

class TelemetryLogger {
public:
    // ÀÓ„ËÓ‚‡ÌËÂ ÚÂÎÂÏÂÚËË
    void logTelemetry();
};

#endif
>>>>>>> a219246406ed763c4bc64259160dfa1b095d3212
